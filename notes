Description:
`
A Firefox browser extension which monitors the URLs that the user visits and sends them to VirusTotal API for analysis. It's made using Manifest V3. The results received from API are interpreted, saved to local storage, and if the site is deemed malicious, the user is alerted. The extension is a "set-and-forget" type of extension. The user installs it, goes through initial setup and leaves it running in the background.

The extension looks at every URL the user visits and extracts the domain part of the URL. It then checks the local storage whether the domain has previously been scanned. In case it wasn't, the URL is sent to VirusTotal API for analysis. After the scan is done, the results are retrieved, interpreted and saved.

Now for the alerting part. If the domain is deemed malicious (more than two engines flagged it as malicious), a new tab opens with a page alerting the user that the site is deemed unsafe. Together with the results of the scan there is also a lastNotified timestamp saved which prevents the extension from spamming the alert on every page refresh. Instead, if the user clicket the "I understand the risk" button, the timestamp is saved and the extension won't alert the user again for that domain in predefined amount of time.

Along the alert timeout, each scan has a validity period defined as a constant, after which the scan is delete from local storage and the extension will then perform a brand new scan if the user visits that domain again.

The extension also has a "home" page which is accessed by clicking the extension icon. The home page contains stats like total domains scanned and a count of malicious domains scanned. It also contains a gear icon which leads the user to settings page. On the settings page there is an option to change the VirusTotal API key. Another part of the home page is the current page status where it shows the results of scan for the currently visited domain.

The initial setup process guides the user through extension setup and here is how it works:
	- There is a page which explains how the extension works in layman's terms
	- The list of permissions necessary and a disclaimer that no URLS or any personal data is sent to anyone except for the VirusTotal API for analysis
	- A page explaining that the user should register to VirusTotal to get a free API key because the extension needs it to work, and that this extension is not in any way affiliated with VirusTotal
	- On that very page, or on the next one should be a form for the API key and a "Save" button which saves the API key to local storage
	- "All set up" page which says everything is done and that the user can now enjoy safe browsing
`

TODO:
- Implement i18n internationalization of the extension
    Goal: Translate the entire extension to Croatian and English
    Action: Use the Firefox i18n API to translate all of the text in extension to Croatian and English.

- Validate the API key on entry
	Goal: Validate the API key entered during setup of the extension
	Action: Either find an VirusTotal API endpoint whose purpose is to validate the API key or just fire a request towards one of the previously used endpoints and check for 401 response. In case the key is invalid alert the user.

- Allow the user to force a domain scan or force a refresh of a scan manually
	Goal: Allow the user to manually override scan behavior and timeouts
	Action: Add a button to popup which will force a new scan of the current domain.

- Check if sufficient permissions are granted before running the extension
	Goal: Alert the user in popup if not sufficient permissions aren't granted to the extension
	Action: Check if permissions are granted

- Use Indexed DB instead of ExtensionStorage for storing analysis results
	Goal: Improve performance of data fetching and saving by using Indexed DB storage.
	Action: Implement DB setup and refactor existing analysis result related methods to use Indexed DB.

- Rate Limit Awareness:
	Goal: Prevent reaching the API call limits set by VirusTotal.
	Action: Implement logic to track the number of API calls made within a specific timeframe (minute, day, month). If the extension is nearing the limit, it should temporarily hold off on making new requests until it's safe to resume. Also keep track and display the quota usage in popup.
